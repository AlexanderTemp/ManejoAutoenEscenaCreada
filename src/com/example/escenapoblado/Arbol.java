package com.example.escenapoblado;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.Random;

import javax.microedition.khronos.opengles.GL10;

public class Arbol {
	private float vertices[] = new float[] { -0.3f, 0.1f, 0.3f, 0.3f, 0.1f,
			0.3f, 0.3f, 2.5f, 0.3f, -0.3f, 2.5f, 0.3f, -0.3f, 0.1f, -0.3f,
			0.3f, 0.1f, -0.3f, 0.3f, 2.5f, -0.3f, -0.3f, 2.5f, -0.3f, 0.3f,
			0.1f, -0.3f, 0.3f, 0.1f, 0.3f, 0.3f, 2.5f, 0.3f, 0.3f, 2.5f, -0.3f,
			-0.3f, 0.1f, -0.3f, -0.3f, 0.1f, 0.3f, -0.3f, 2.5f, 0.3f, -0.3f,
			2.5f, -0.3f, -1.4667195f, 3.942144f, 2.7858987f, -0.15258598f,
			3.5978737f, -0.82209873f, 1.0683022f, 2.8123913f, 2.817418f,
			-0.17785025f, 2.9030273f, -2.479671f, 1.8986626f, 3.8280797f,
			-2.5878477f, 2.7874818f, 4.7834897f, -0.38904428f, -1.0882956f,
			3.8483868f, 0.77095056f, -0.45356894f, 5.605239f, -2.056241f,
			0.40030432f, 4.7769237f, 0.8028703f, -0.3243692f, 3.210499f,
			2.7987843f, 0.29286146f, 4.2694697f, -1.9814519f, -2.5990233f,
			3.250711f, 0.7548008f, 1.3143287f, 4.2089114f, -0.3828559f,
			-1.6835936f, 4.397442f, -1.3418502f, 2.8795652f, 4.4365997f,
			2.4287753f, -1.8161066f, 5.2797537f, 0.39010048f, -0.7247379f,
			2.325355f, -1.5835494f, 1.6249442f, 4.686575f, -2.0095334f,
			1.783225f, 4.032649f, 1.2756662f, -0.041114807f, 5.482341f,
			-1.5542053f, 2.4280267f, 2.3964262f, -1.6961092f, -2.94945f,
			3.6122851f, -2.738028f, 1.2534695f, 5.8643627f, -1.6629038f,
			1.5972924f, 4.0786576f, -1.3237871f, -1.1739188f, 2.9525955f,
			-0.89293313f, -0.5408106f, 5.8977537f, -1.817458f, -2.9235783f,
			6.243948f, -0.6653981f, 1.2773995f, 5.9828024f, -2.5694237f,
			0.29199982f, 3.9571948f, -2.4825604f, 0.0027680397f, 5.17797f,
			-0.10597229f, -1.6059451f, 6.408201f, 2.6265116f, -1.8625685f,
			3.3984034f, -2.0302916f, 2.0984626f, 2.7533312f, 2.1908264f,
			0.35909486f, 2.5602484f, -1.1531914f, -1.220374f, 2.2321703f,
			2.4078846f, 2.0834432f, 5.500158f, -0.09804082f, -0.7610297f,
			4.319255f, -2.9683764f, 2.5146885f, 2.2186291f, -1.8400866f,
			-2.1158166f, 4.76754f, -0.12029505f, -1.7176262f, 5.505883f,
			-0.11725664f, -0.8180442f, 4.6381526f, -1.7199197f, 2.2311382f,
			4.9363317f, 2.4705195f, 0.7080538f, 3.9423022f, 0.056886435f,
			0.38747883f, 4.2157497f, 2.4208708f, 1.5639229f, 2.9782815f,
			0.6815295f, -1.3611091f, 4.927722f, 2.184011f, -1.5232176f,
			6.1879582f, 0.50204587f, 1.9681616f, 6.221387f, 0.7190175f,
			-1.2172855f, 5.9557714f, 0.05409479f, 1.6006274f, 4.260992f,
			-1.5064563f, 0.6721821f, 4.6350803f, -0.50696945f, -0.9749727f,
			4.756176f, 1.943265f, -2.3119555f, 2.4648733f, 2.6335483f,
			-1.953372f, 3.9442916f, 2.5618606f, 1.4762096f, 4.090189f,
			2.431456f, -2.4037821f, 5.314185f, 0.07193136f, 1.1014347f,
			2.1398206f, -0.66156816f, 0.27974415f, 4.216901f, 2.5178485f,
			2.749783f, 4.6606092f, 2.9329085f, 2.1914282f, 5.410038f,
			2.827499f, -0.41875696f, 5.070877f, -2.2257805f, -0.94290304f,
			3.0950336f, 2.2422352f, -2.2568586f, 3.2444944f, -2.4559422f,
			-1.3296322f, 5.342984f, 2.3640623f, 2.3114567f, 2.5279436f,
			0.622489f, -2.735046f, 5.257024f, 1.7832603f, -0.39709353f,
			4.696996f, 0.7261014f, 0.91398764f, 5.2791624f, 1.9894748f,
			-0.85258985f, 5.0228844f, -2.1888037f, 0.3041892f, 4.319255f,
			-2.7071676f, -2.9811494f, 2.4983637f, 1.2273321f, -2.423027f,
			2.7465343f, -1.2244813f, -0.60900116f, 3.9223886f, 2.338018f,
			-2.6056345f, 2.862874f, -2.098488f, 0.18703079f, 2.8946064f,
			-1.3789916f, -2.1275282f, 4.8732944f, -0.61348486f, -0.23317528f,
			3.4437995f, -0.84574175f, 2.2890744f, 2.7387643f, -2.5921977f,
			0.83309174f, 3.8963861f, 2.270276f, -1.1052926f, 2.975221f,
			-0.32132435f, 2.0849752f, 4.8452806f, 0.47729373f, 2.1842852f,
			5.727581f, -0.8488798f, -1.9507735f, 3.4786177f, 0.74296427f,
			2.758184f, 6.1490545f, -2.1628883f, 2.2428303f, 2.8585727f,
			-1.8185817f, -1.3881129f, 3.192139f, -2.767878f, 2.890675f,
			6.324474f, -2.5397463f, 2.8060675f, 4.3525267f, 0.17919874f,
			-1.6441659f, 2.3882494f, 0.44796705f, -1.0346081f, 3.1666164f,
			-0.7412987f, 0.32427597f, 2.1372004f, -1.3695946f, 0.45367455f,
			2.798249f, 1.8223634f, -1.9848533f, 4.777972f, -1.9052303f,
			-0.9667816f, 3.5227208f, 0.10712671f, -2.4748273f, 2.3664937f,
			-2.921002f, -1.319266f, 5.5657797f, -0.3418069f, 2.8293304f,
			4.465066f, 2.4424968f, -0.047373295f, 3.1851993f, -2.4721384f,
			-0.4876907f, 3.1597254f, -0.991168f, -0.28057694f, 5.907422f,
			1.3660855f, 2.6799226f, 4.8344555f, -2.7671618f, 0.68602395f,
			2.4921503f, 0.683301f, 1.5640488f, 2.4797115f, -0.1445651f,
			-2.2885273f, 3.208673f, 2.3177423f, 0.4501505f, 3.947428f,
			-2.9565887f, -0.79093885f, 6.3700595f, 2.424858f, -0.84137774f,
			5.989033f, 0.87880564f, 1.790627f, 3.539832f, 2.354249f,
			-0.40314007f, 4.646984f, -0.56919384f, -2.2590084f, 2.986137f,
			2.0007372f, 1.7678795f, 3.6763155f, 0.86073923f, 1.6062908f,
			6.233563f, 1.6520114f, -2.1662354f, 2.3980136f, -2.7084856f,
			2.6026845f, 4.52443f, -0.7092314f, 0.6559496f, 5.813896f,
			1.9531956f, -1.683466f, 3.7328396f, 2.7305765f, -1.3335224f,
			6.0568094f, -1.1929132f, -0.37666988f, 2.1866035f, -1.8955443f,
			2.8871799f, 5.4416533f, -0.6787195f, -2.2238827f, 4.3196244f,
			-2.5014849f, 0.63489103f, 3.1114178f, -0.98750114f, -0.19378233f,
			4.7287884f, -1.277043f, 1.5515842f, 5.652423f, -0.49962974f,
			-1.583451f, 4.05797f, 2.893797f, 1.225822f, 6.4040365f,
			0.20434046f, -2.5136383f, 6.004263f, 1.0410872f, -1.6762923f,
			2.4256623f, -2.6221726f, 2.2053351f, 5.023469f, 1.8690796f,
			-1.3505777f, 5.5325584f, 0.8283119f, -1.846261f, 4.8860617f,
			-0.64583635f, -0.033669233f, 3.2642488f, 1.2340345f, -2.718361f,
			2.4577448f, 0.3232317f, -1.561341f, 5.9049816f, -1.5748733f,
			-1.9327805f, 3.6980937f, 1.17521f, 0.38899255f, 2.7123415f,
			-0.56536627f,

	};
	FloatBuffer bufVertices;
	Random rand = new Random();
	float minx = -0.8f, maxx = 0.8f;
	float miny = 0f, maxy = 0.9f;
	float minz = -0.8f, maxz = 0.8f;

	public Arbol() {
		ByteBuffer bufByte = ByteBuffer.allocateDirect(vertices.length * 4);
		bufByte.order(ByteOrder.nativeOrder());
		bufVertices = bufByte.asFloatBuffer();
		bufVertices.put(vertices).rewind();
	}

	public void dibuja(GL10 gl) {
		gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
		gl.glVertexPointer(3, GL10.GL_FLOAT, 0, bufVertices);
		gl.glColor4f(155 / 255f, 78 / 255f, 0, 1);
		gl.glDrawArrays(GL10.GL_TRIANGLE_FAN, 0, 4);
		gl.glDrawArrays(GL10.GL_TRIANGLE_FAN, 4, 4);
		gl.glDrawArrays(GL10.GL_TRIANGLE_FAN, 8, 4);
		gl.glDrawArrays(GL10.GL_TRIANGLE_FAN, 12, 4);
		gl.glColor4f(0, 128 / 255f, 64 / 255f, 1);
		int i = 16;
		for (int j = 0; j < 45; j++) {
			gl.glDrawArrays(GL10.GL_TRIANGLES, i, 3);
			i = i + 3;
		}

		gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
	}

}
